getwd()
setwd("C:/Users/Tae/Documents/R/loss_shifting/test_result")
source("~/R/loss_shifting/code/test_data_analysis.R")
# 필요한 라이브러리 로드
library(ggplot2)
library(dplyr)
library(stringr)
# 1) CSV 파일 경로 지정
csv_path <- "0711_seed2025_unsym.csv"
# 2) 데이터 불러오기
df <- read.csv(csv_path, stringsAsFactors = FALSE)
# 3) category 생성:
#    - LossShift 모델은 base_loss-style (e.g. hinge-soft)
#    - 그 외(e1071, GLMNet, LiblineaR 등)는 모델명 그대로
df <- df %>%
mutate(
category = ifelse(
str_detect(model, "^LossShift"),
str_replace(model, "^LossShift_([^_]+)_([^_]+)_.*$", "\\1-\\2"),
model
)
)
# 4) x축 순서(알파벳 순) 지정
df$category <- factor(df$category, levels = sort(unique(df$category)))
# 5) ggplot으로 박스플롯 그리기
ggplot(df, aes(x = category, y = accuracy)) +
geom_boxplot(
outlier.shape = 1,     # 이상치는 동그라미
show.legend    = FALSE
) +
stat_summary(
fun = mean,            # 평균은 삼각형
geom = "point",
shape = 17,
size  = 3,
color = "red"
) +
labs(
title = "Accuracy distribution by LossShift base_loss+style and baselines",
x     = "Category (base_loss-style or baseline)",
y     = "Accuracy"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title  = element_text(hjust = 0.5)
)
source("~/R/loss_shifting/code/test_data_analysis.R")
# 필요한 라이브러리 로드
library(ggplot2)
library(dplyr)
library(stringr)
# 1) CSV 파일 경로
csv_path <- "0711_seed2025_unsym.csv"
# 2) 데이터 불러오기
df <- read.csv(csv_path, stringsAsFactors = FALSE)
# 3) 토큰 분리해서 base_loss, style 추출
tokens <- str_split_fixed(df$model, "_", 4)
df$base_loss <- tokens[,2]
df$style     <- tokens[,3]
# 4) category 생성: LossShift → base_loss-style, 그 외는 모델명 그대로
df <- df %>%
mutate(category = ifelse(
str_detect(model, "^LossShift"),
paste0(base_loss, "-", style),
model
))
# 5) LossShift에서 사용된 base_loss 순서(등장 순서대로) 뽑기
base_loss_levels <- unique(df$base_loss[str_detect(df$model, "^LossShift")])
# 6) 스타일 순서 정의
style_order <- c("none", "soft", "hard")
# 7) 원하는 x축 레벨 순서 만들기
lossshift_levels <- unlist(lapply(style_order, function(s) {
paste0(base_loss_levels, "-", s)
}))
# 벤치마크 모델들(그 외) 레벨
other_levels <- sort(setdiff(unique(df$category), lossshift_levels))
# 최종 레벨 순서
all_levels <- c(lossshift_levels, other_levels)
# 8) factor 레벨 지정
df$category <- factor(df$category, levels = all_levels)
# 9) 그래프 그리기
ggplot(df, aes(x = category, y = accuracy)) +
geom_boxplot(outlier.shape = 1) +
stat_summary(
fun = mean, geom = "point",
shape = 17, size = 3, color = "red"
) +
labs(
title = "Accuracy distribution by LossShift base_loss–style and baselines",
x     = "Category (base_loss-style or baseline)",
y     = "Accuracy"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title     = element_text(hjust = 0.5)
)
source("~/R/loss_shifting/code/test_data_analysis.R")
# 필요한 라이브러리 로드
library(ggplot2)
library(dplyr)
library(stringr)
# 1) CSV 파일 경로
csv_path <- "0711_seed2025_unsym.csv"
# 2) 데이터 불러오기
df <- read.csv(csv_path, stringsAsFactors = FALSE)
# 3) 토큰 분리해서 base_loss, style 추출
tokens <- str_split_fixed(df$model, "_", 4)
df$base_loss <- tokens[,2]
df$style     <- tokens[,3]
# 4) category 생성: LossShift → base_loss-style, 그 외는 모델명 그대로
df <- df %>%
mutate(category = ifelse(
str_detect(model, "^LossShift"),
paste0(base_loss, "-", style),
model
))
# 5) LossShift에서 사용된 base_loss 순서(등장 순서대로) 뽑기
base_loss_levels <- unique(df$base_loss[str_detect(df$model, "^LossShift")])
# 6) 스타일 순서 정의
style_order <- c("none", "soft", "hard")
# 7) 원하는 x축 레벨 순서 만들기
lossshift_levels <- unlist(lapply(style_order, function(s) {
paste0(base_loss_levels, "-", s)
}))
# 벤치마크 모델들(그 외) 레벨
other_levels <- sort(setdiff(unique(df$category), lossshift_levels))
# 최종 레벨 순서
all_levels <- c(lossshift_levels, other_levels)
# 8) factor 레벨 지정
df$category <- factor(df$category, levels = all_levels)
# 9) 그래프 그리기
ggplot(df, aes(x = category, y = f1)) + # accuracy, f1으로 변경 가능능
geom_boxplot(outlier.shape = 1) +
stat_summary(
fun = mean, geom = "point",
shape = 17, size = 3, color = "red"
) +
labs(
title = "Accuracy distribution by LossShift base_loss–style and baselines",
x     = "Category (base_loss-style or baseline)",
y     = "Accuracy"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title     = element_text(hjust = 0.5)
)
# 필요한 라이브러리 로드
library(ggplot2)
library(dplyr)
library(stringr)
# 1) CSV 파일 경로
csv_path <- "0711_seed2025_unsym.csv"
# 2) 데이터 불러오기
df <- read.csv(csv_path, stringsAsFactors = FALSE)
# 3) 토큰 분리해서 base_loss, style 추출
tokens <- str_split_fixed(df$model, "_", 4)
df$base_loss <- tokens[,2]
df$style     <- tokens[,3]
# 4) category 생성: LossShift → base_loss-style, 그 외는 모델명 그대로
df <- df %>%
mutate(category = ifelse(
str_detect(model, "^LossShift"),
paste0(base_loss, "-", style),
model
))
# 5) LossShift에서 사용된 base_loss 순서(등장 순서대로) 뽑기
base_loss_levels <- unique(df$base_loss[str_detect(df$model, "^LossShift")])
# 6) 스타일 순서 정의
style_order <- c("none", "soft", "hard")
# 7) 원하는 x축 레벨 순서 만들기
lossshift_levels <- unlist(lapply(style_order, function(s) {
paste0(base_loss_levels, "-", s)
}))
# 벤치마크 모델들(그 외) 레벨
other_levels <- sort(setdiff(unique(df$category), lossshift_levels))
# 최종 레벨 순서
all_levels <- c(lossshift_levels, other_levels)
# 8) factor 레벨 지정
df$category <- factor(df$category, levels = all_levels)
# 9) 그래프 그리기
ggplot(df, aes(x = category, y = accuracy)) + # accuracy,f1으로 변경 가능
geom_boxplot(outlier.shape = 1) +
stat_summary(
fun = mean, geom = "point",
shape = 17, size = 3, color = "red"
) +
labs(
title = "Accuracy distribution by LossShift base_loss–style and baselines",
x     = "Category (base_loss-style or baseline)",
y     = "Accuracy"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title     = element_text(hjust = 0.5)
)
source("C:/Users/Tae/Downloads/spiral_data_parallel_assymetric_flip_test.R")
############################################################
#  benchmark_loss_shift.R   (glmnet 포함, time 항목 제거)
#  - flip_pos :  y = +1 클래스 뒤집기 비율 (0 ~ 1)
#  - flip_neg :  y = −1 클래스 뒤집기 비율 (0 ~ 1)
############################################################
suppressPackageStartupMessages({
library(e1071)
library(LiblineaR)
library(caret)
library(glmnet)
library(foreach)
library(doParallel)
library(dplyr)
library(tibble)
})
## 1) Loss-Shifting 원본 로드 --------------------------------------------
source("loss_shifting.r")   # IRLS 안정화·lambda_grid 1e-2 반영본
############################################################
#  benchmark_loss_shift.R   (glmnet 포함, time 항목 제거)
#  - flip_pos :  y = +1 클래스 뒤집기 비율 (0 ~ 1)
#  - flip_neg :  y = −1 클래스 뒤집기 비율 (0 ~ 1)
############################################################
suppressPackageStartupMessages({
library(e1071)
library(LiblineaR)
library(caret)
library(glmnet)
library(foreach)
library(doParallel)
library(dplyr)
library(tibble)
})
## 2) 두-반달(two-moon) 데이터 -------------------------------------------
make_two_moon <- function(n, noise = 0.15) {
n1  <- n %/% 2
th1 <- runif(n1,       0, pi)
th2 <- runif(n - n1,   0, pi)
x1 <- cbind(cos(th1),  sin(th1)) +
matrix(rnorm(2 * n1, 0, noise), n1)
x2 <- cbind(1 - cos(th2),
1 - sin(th2) - 0.5) +
matrix(rnorm(2 * (n - n1), 0, noise), n - n1)
X <- rbind(x1, x2)
y <- c(rep(1, n1), rep(-1, n - n1))
data.frame(X1 = X[, 1], X2 = X[, 2], y = y)
}
## 2) 스파이럴(spiral) 데이터 생성 -------------------------------------------
make_spiral <- function(n, noise = 0.2, turns = 1) {
# n: 전체 샘플 수
# noise: 노이즈 강도
# turns: 나선 회전 수
n1 <- n %/% 2
# 클래스 +1
theta1 <- seq(0, 2 * pi * turns, length.out = n1)
x1 <- cbind(
theta1 * cos(theta1),
theta1 * sin(theta1)
) + matrix(rnorm(2 * n1, 0, noise), ncol = 2)
# 클래스 -1
theta2 <- seq(0, 2 * pi * turns, length.out = n - n1)
x2 <- cbind(
theta2 * cos(theta2 + pi),
theta2 * sin(theta2 + pi)
) + matrix(rnorm(2 * (n - n1), 0, noise), ncol = 2)
X <- rbind(x1, x2)
y <- c(rep(1, n1), rep(-1, n - n1))
data.frame(X1 = X[,1], X2 = X[,2], y = y)
}
### 시각화확인
## 1) 패키지 로드 및 데이터 생성
library(ggplot2)       # ggplot2를 사용하기 위해 로드
set.seed(123)          # 재현성
spiral_df <- make_spiral(n = 500, noise = 0.6, turns = 1)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
spiral_df <- make_spiral(n = 500, noise = 0.6, turns = 2)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
spiral_df <- make_spiral(n = 500, noise = 0.6, turns = 1)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
spiral_df <- make_spiral(n = 500, noise = 0.8, turns = 1)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
spiral_df <- make_spiral(n = 500, noise = 0.9, turns = 1)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
spiral_df <- make_spiral(n = 500, noise = 1, turns = 1)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
spiral_df <- make_spiral(n = 500, noise = 0.85, turns = 1)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
spiral_df <- make_spiral(n = 500, noise = 0.8, turns = 1)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
spiral_df <- make_spiral(n = 500, noise = 0.85, turns = 1)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
### 시각화확인
## 1) 패키지 로드 및 데이터 생성
library(ggplot2)       # ggplot2를 사용하기 위해 로드
set.seed(123)          # 재현성
spiral_df <- make_spiral(n = 500, noise = 0.85, turns = 1)
#
# 2) ggplot2로 시각화
ggplot(spiral_df, aes(x = X1, y = X2, color = factor(y))) +
geom_point(size = 1.5) +
scale_color_manual(values = c("blue", "red"),
labels = c("-1 클래스", "+1 클래스")) +
labs(title = "Spiral 데이터 분포",
x = "X1",
y = "X2",
color = "클래스") +
theme_minimal()
